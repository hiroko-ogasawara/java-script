//var 再代入、再宣言の両方〇
var text = "変数宣言"
text = "再代入"
var text = "再宣言"
console.log(text);

//let 再代入〇、再宣言エラー
let text1 = "変数宣言"
text1 = "再代入"
// var text1 = "再宣言" ←エラー
console.log(text1);

//const 再代入、再宣言の両方エラー
const text2 = "変数宣言"
// text2 = "再代入"
// text2 = "再宣言"
console.log(text2)

/* ※var、let、constをしない場合でも変数宣言は成立しますが、
どこからでもアクセスできてしまう為（グローバル変数）、バグを引き起こしやすく推奨されない。
（例）*/
var item = 1; //グローバル変数
function number() {
    item = 10; //グローバル変数（※varを付けていない為ローカル変数ではない）
    console.log(item);
}
number();
console.log(item);

/*上記の結果は、
1. 10
2. 1
ではなく、

1 .10
2 .10
となる。
item = 10;のグローバル変数がどこでもアクセスできてしまう為、var、let、constを使用してグローバル変数を避ける必要がある。
*/


/* 1. var、let、constの使⽤についてまとめてください。
var :再代入、再宣言の両方とも可能。
varは関数スコープを持つので、関数内で宣言した変数は関数のいずれの場所でも参照できる。

let :再代入は可能だが、再宣言はできない。
letはvarを改善する為に導入された構文。
またletで宣言された変数はブロックスコープを持つのでvarよりアクセスできる場所が制限されている。
※ブロックとはforやif文などの｛｝で囲まれている部分のこと。
そのためletで宣言された変数はif文の外からアクセスできない。
またletで宣言した変数の前に使用とするとエラーが起こるので、let宣言した変数の後にアクセスする。

const :再代入と再宣言の両方できない。
constもブロックスコープを持つ為、varよりアクセスできる場所が制限されている。
constもletと同じくconst宣言した変数の前に使用とするとエラーが起こるので、
const宣言した変数の後にアクセスする。

2. なぜvarを使わない理由をまとめてください。
1つ目にvarを使用したコードの書き方によって、「変数の巻き上げ」が起きる可能性がある。
（※）巻き上げとは、宣言の前に関数または変数を使用できる動作で、
JavaScriptコンパイラはエラーが発生しないように、変数と関数のすべての宣言を一番上に移動する。
下記の例のようなコードの書き方の場合、var cat_breed = "シャム"は関数外で宣言しているので
巻き上げが発生し、未定義と扱われて1番目のconsole.log(cat_breed);はエラーではなく「undefined」と表示される。
※巻き上げはlet,constでは起きない。エラー表示される。

(例)*/
var cat_breed = "シャム";
function cat() {
    console.log(cat_breed);
    var cat_breed = "シンガプーラ";
    console.log(cat_breed);
}
cat();

/*2つ目にvarは再代入、再宣言ができることによってミスやバグに繋がることが多いことからletとconstを使用することが推奨されている。

 3. 定数とは？
一度指定すると上書き等の変更ができない変数の１種。
値が変更できないデメリットはあるが、値が変わらないことでエラーを防ぐメリットがある。
定数を書く時は、再宣言と再代入の両方のできないconstを使用すること。*/

const lang = japanese;
console.log(number);